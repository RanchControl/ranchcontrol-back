// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  password    String
  fullName    String
  role        Role      @default(USER)
  phoneNumber String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deletedAt   DateTime?
  farms       Farm[]
}

model Farm {
  id         Int         @id @default(autoincrement())
  user       Int
  name       String
  cnpj       String      @unique @db.VarChar(14)
  address    String
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
  deletedAt  DateTime?
  users      User        @relation(fields: [user], references: [id])
  enclosures Enclosure[]
}

model Enclosure {
  id        Int       @id @default(autoincrement())
  farm      Int
  name      String
  type      String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  deletedAt DateTime?
  farms     Farm      @relation(fields: [farm], references: [id])
  batch     Batch?
  animals   Animal[]
}

model Batch {
  id                 Int       @id @default(autoincrement())
  enclosure          Int       @unique
  name               String?
  weightAverage      Float?    @default(0)
  animalQuantity     Int?      @default(0)
  earringStartNumber Int?
  breed              String
  age                Int
  bornDate           DateTime
  observation        String?
  situation          String
  createdAt          DateTime  @default(now())
  updateAt           DateTime  @updatedAt
  deletedAt          DateTime?
  enclosures         Enclosure @relation(fields: [enclosure], references: [id])
  animals            Animal[]
}

model Animal {
  id           Int        @id @default(autoincrement())
  name         String?
  number       Int?       @unique
  sex          String?
  breed        String
  bornDate     DateTime?
  bornWheight  Float?
  entryDate    DateTime
  entryWheight Float?
  weaningDate  DateTime?
  fitnessDate  DateTime?
  type         String?
  weight       Float?
  status       String?
  category     String?
  prefix       String?
  suffix       String?
  enclosure    Int?
  batch        Int?
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt
  deletedAt    DateTime?
  batchs       Batch?     @relation(fields: [batch], references: [id])
  enclosures   Enclosure? @relation(fields: [enclosure], references: [id])
}
